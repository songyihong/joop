CSS Selector 使用标准 3 选择符 注意不支持任何伪选择符(: ::) 选择符中不能使用双引号
---------------------------------------------------------------------------------------------------------
预定义参数
Long        ZHUOZHUO.Version                                                                            此代码版本
Boolean     ZHUOZHUO.BrowserKernel.Trident                                                              浏览器内核 IE
Boolean     ZHUOZHUO.BrowserKernel.Gecko                                                                浏览器内核 Firefox,MozillaSuite/SeaMonkey,Mozilla,Thunderbird
Boolean     ZHUOZHUO.BrowserKernel.Presto                                                               浏览器内核 Opera
Boolean     ZHUOZHUO.BrowserKernel.WebKit                                                               浏览器内核 Safari
Boolean     ZHUOZHUO.BrowserKernel.KHTML                                                                浏览器内核 Konqueror
String      ZHUOZHUO.BrowserVersion                                                                     浏览器内核版本(IE, Opera显示浏览器版本)
Boolean     ZHUOZHUO.BrowserFeatures.XPath                                                              是否支持xpath
Boolean     ZHUOZHUO.BrowserFeatures.SelectorsAPI                                                       是否支持css选择器
Function    ZHUOZHUO.TRUE                                                                               返回true 注:function(){return true}
Function    ZHUOZHUO.FALSE                                                                              返回false 注:function(){return false}
---------------------------------------------------------------------------------------------------------
Object扩展
Object      Object.extend(Object destination, Object source)                                            source对象合并到destination上 相同的方法或涵数覆盖
Object      Object.clone(Object object)                                                                 通过表面的复制来克隆这个传入的对象(只复制所有的原始的属性到结果里)
Boolean     Object.isString(Object object)                                                              判断是否字符对象
Boolean     Object.isFunction(Object object)                                                            判断是否涵数对象
Boolean     Object.isUndefined(Object object)                                                           判断是否未定义
Boolean     Object.isArray(Object object)                                                               判断是否是数组
Boolean     Object.isNumber(Object object)                                                              判断是否是数字
String      Object.param(Object object)                                                                 序列化
Array       Object.toArray(Object iterable)                                                             将带数字化索引的类似数组对象转换成真正的数组对象
Object      Object.tryThese(Function[,Function]...)                                                     执行一个或多个涵数并返回第一个无错误执行结果(没有任何正确结果则返回未定义)
void        Object.gc(Object object)                                                                    删除对象 释放资源
---------------------------------------------------------------------------------------------------------
事件(隶属window对象)
EventObject Event.extend(event)                                                                         标准化格式事件属性(按照Mozilla标准返回所有事件属性) 属性列表返回的DOM对象均未扩展
void        Event.stopPropagation(event)                                                                停止事件冒泡
void        Event.preventDefault(event)                                                                 取消事件的默认动作
HTMLElement Event.target(event)                                                                         获取事件触发元素
HTMLElement Event.addEvent(HTMLElement element, String eventName, Function handler)                     注册事件处理 返回被注册事件的DOM元素节
HTMLElement Event.removeEvent(HTMLElement element, String eventName, Function handler)                  删除事件处理 返回被删除事件相关DOM元素节
---------------------------------------------------------------------------------------------------------
/*扩展DOM(隶属window对象)*/
HTMLElement Element.extend(HTMLElement element)                                                         将element转换为扩展后的元素对象
---------------------------------------------------------------------------------------------------------
Document 扩展
Object      .view.getDimensions()                                                                       获取尺寸 {Integer pageWidth,Integer pageHeight,Integer screenWidth,Integer screenHeight}
Object      .view.getScrollOffsets()                                                                    获取滚动条偏移位置 {Integer top,Integer left}
HTMLElement .createTable(Integer rows, Integer cells)                                                   创建指定行列数的表格 行集合数组 $rows 列集数组 $cells
Array       .getElementsBySelector(String selectors[, HTMLElement element])                             css选择器 选择第二参数范围内 第二参数为空,范围 document
---------------------------------------------------------------------------------------------------------
/*原型扩展*/
String      String.trim()                                                                               去除左右两边的空格
Integer     String.wlength()                                                                            按英文长度返回字符串长度,一个汉字相当于两个英文字符
String      String.wsubstr(wstart[, wlength])                                                           按英文长度从开始位置截取指定长度字符串 一个汉字相当于两个英文字符
String      String.wsubstring(wstart, wend)                                                             按英文长度截取指定范围的字符串
Array       Array.each(Function handler(Object object, Integer index))                                  迭代数组 并 相同的参数，面向所有的元素。返回调用方法的结果。第一参数数组值,第二个参数索引,返回执行结果数组
Array       Array.uniq()                                                                                返回不重复的数组
Integer     Array.indexOf(Object object[, Integer startIndex])                                          在数组中查找指定元素的位置,找不到返回 -1 可选参数 搜索的起始索引。空数组中 0（零）为有效值。
---------------------------------------------------------------------------------------------------------
/* 通用扩展 */
Element.Methods

Array       .getElementsBySelector(String selectors)                                                    css选择器 只选择此节点以内范围

HTMLElement .addEvent(String eventName, Function handler)                                               Event.addEvent的简便实现
HTMLElement .removeEvent(String eventName, Function handler)                                            删除事件处理 返回被删除事件相关DOM元素节

HTMLElement .startCapture()                                                                             捕获鼠标移动
HTMLElement .stopCapture()                                                                              释放鼠标捕获

Boolean     .hasClassName(String className)                                                             判断元素中是否有指定css类名属性值存在
HTMLElement .addClassName(String className)                                                             增加css类名
HTMLElement .removeClassName(String className)                                                          删除指定css类名

Boolean     .hasAttr(String attributeName)                                                              判断是否存在这个属性
HTMLElement .setAttr(Object attributes)                                                                 设置属性值{属性名:值[,属性名:值]...}
HTMLElement .setAttr(String name, Object value)                                                         设置属性值 属性名, 值
Object      .getAttr(String attributeName)                                                              读取指定属性的值

HTMLElement .setStyle(Object styles)                                                                    设置css样式{[名称:值[,名称:值]...}形式
HTMLElement .setStyle(String name, String value)                                                        设置css样式 名称, 值
String      .getStyle(String styleName)                                                                 获取样式

HTMLElement .setOpacity(Float opacity)                                                                  设置透明度(0.0-1.0)
Float       .getOpacity()                                                                               获取透明度(0.0-1.0)

HTMLElement .setAlphaImage(String url)                                                                  设置透明背景图片
String      .getAlphaImage()                                                                            获取透明背景图片

HTMLElement .setText(String value)                                                                      设置文本内容
String      .getText()                                                                                  获取文本内容

HTMLElement .show([String value])                                                                       显示 参数相当于设置 display = value || block
HTMLElement .hide()                                                                                     隐藏 相当于设置 display = none
HTMLElement .toggle([String value])                                                                     显示隐藏切换 参数同上

Object      .getOffsets()                                                                               获取放置偏移坐标 {left, top}
Object      .getDimensions()                                                                            获取尺寸{width, height}

HTMLElement .remove();                                                                                  删除自己
HTMLElement .insert(String sWhere, HTMLElement oElement)                                                在指定的位置高级的插入节点操作sWhere=beforeBegin|afterBegin|beforeEnd|afterEnd 返回新插入元素

HTMLElement .animate(Object styles, Integer frames, Integer delay, Integer factor, Function callback(HTMLElement node, Integer frames))
                                                                                                        自定义动画 (value:目的样式属性,frames:帧数,delay:每帧时间,factor:渐变因子(为"average"或非数字时 等于平均变化,否则每次按照此设置除法递减),callback:回调参数)
                                                                                                        callback 调用有两个参数node和frames node=被执节点,frames=当前倒数帧数 frames到1 到数 为1表示最后一帧 0表示结束
HTMLElement .animate(Object styles, Integer frames, Integer delay, Function callback)                   自定义动画
HTMLElement .animate(Object styles, Integer frames, Function callback)                                  自定义动画
HTMLElement .animate(Object styles, Function callback)                                                  自定义动画
HTMLElement .animate(Object styles)                                                                     自定义动画

兼容方法....................................兼容方法不支持链式操作 为浏览器自带方法
oElement = object.appendChild(oNode)                                                                    向节点的子节点列表的末尾添加新的子节点。 返回这个新的子节点
oClone = object.cloneNode( [bCloneChildren])                                                            返回克隆的节点 必要参数。如果逻辑参数设置为true，那么克隆的节点将克隆最初节点中的所有子节点

兼容属性....................................浏览器自带方法
object.innerHTML [ = sHTML ]                                                                            获取或设置HTML内容
[ oElement = ] object.parentNode                                                                        获取文档层次中的父对象。

/* 特殊标签 */
Element.Methods_INPUT
String      .getValue()                                                                                 获取值
HTMLElement .setValue(string value)                                                                     设置值
Element.Methods_FORM = {}
Element.Methods_TEXTAREA = Object.extend(Object.clone(Element.Methods_INPUT), {})
Element.Methods_SELECT = Object.extend(Object.clone(Element.Methods_INPUT), {})

---------------------------------------------------------------------------------------------------------
/* 选择器 */
Object      $(HTMLElement element[, HTMLElement element]...|String[,String]...)                         id选择器
Array       $$(String selectors[, String selectors]...)                                                 css选择器 Document.getElementsBySelector(String selectors) 集成
/* 类构造器 */
class       Class([Class superclass...], Class subclass)                                                创建可继承类
            增加 initialize 构造涵数
            增加 Class.superclass 父类
            执行父类构造涵数 Class.superclass.initialize.apply(this, arguments)
            执行父类析构涵数 Class.superclass.finalize.apply(this)
            说明:方法不能设置定义变量
            约定:public 与 private区别 private 方法或属性前赘 _
            Class 创建类  所有类都继承此类
        方法:
        Object      clone()                                                         创建并返回此对象的一个副本
        Boolean     equals(Object obj)                                              指示某个其他对象是否与此对象“相等”。
        void        finalize()                                                      释放资源
        使用方法:例
        var ajax = Class(superclass,{...});
        var a = new ajax();
            a.finalize();
            delete a;
            a = null;
---------------------------------------------------------------------------------------------------------
附录
---------------------------------------------------------------------------------------------------------
事件说明
Event.addEvent,Event.removeEvent 额外支持事件类型
    String  mousewheel          当鼠标滚轮按钮旋转时触发。
EventObject 标准化事件对象
    属性:
    Boolean altKey        返回当事件被触发时，"ALT" 是否被按下。
    Boolean ctrlKey       返回当事件被触发时，"CTRL" 键是否被按下。
    Boolean shiftKey      返回当事件被触发时，"SHIFT" 键是否被按下。
    Integer keyCode       设置或获取与导致事件的按键关联的 Unicode 按键代码。
    Integer clientX       返回当事件被触发时，鼠标指针的水平坐标。
    Integer clientY       返回当事件被触发时，鼠标指针的垂直坐标。
    Integer screenX       返回当某个事件被触发时，鼠标指针的水平坐标。
    Integer screenY       返回当某个事件被触发时，鼠标指针的垂直坐标。
    Integer layerX        获取鼠标指针位置相对于触发事件的对象的 x 坐标。
    Integer layerY        获取鼠标指针位置相对于触发事件的对象的 y 坐标。
HTMLElement relatedTarget 返回与事件的目标节点相关的节点。
    Integer detail        设置或获取滚轮按钮滚动的距离和方向。
HTMLElement target        返回触发此事件的元素（事件的目标节点）。
HTMLElement currentTarget 返回其事件监听器触发该事件的元素。
    String  type          返回当前 Event 对象表示的事件的名称。
---------------------------------------------------------------------------------------------------------
事件基类
类 EventListener
构造:
    new EventListener();
属性:
    Array   _Listeners      事件队列
方法:
    void    addListener(eventName, handler);                                    添加事件处理
    void    removeListener(eventName, handler);                                 删除事件处理
    void    notifyEvent(eventName, eventObject);                                通知事件
---------------------------------------------------------------------------------------------------------
XMLHTTP 对象
现在的绝对多数浏览器都增加了对XmlHttp的支持，IE中使用ActiveXObject方式创建XmlHttp对象，其他浏览器如：Firefox、Opera等通过window.XMLHttpRequest来创建xmlhttp对象。
---------------------------------------------------------------------------------------------------------
Ajax.Response
构造:
    new Ajax.Response(XMLHTTP XmlHttp)                                          包装构建一个新的 AjaxResponse 对象。
属性:
    XMLHTTP     xmlHttp                                                         被封装Xmlhttp对象
    String      text                                                            以文本形式获取返回内容
    XmlDocument xml                                                             以xml形式获取返回内容
    String      length                                                          获取返回长度
    String      type                                                            获取内容类型
    Integer     status                                                          状态码
方法:
    String      getAllHeaders()                                                 获取所有返回头
    String      getHeader(String header)                                        获取指定名称返回头
---------------------------------------------------------------------------------------------------------
类 Ajax.Request extends EventListener                                           继承自事件监听
构造:
    new Ajax.Request()                                                          构建一个新的 Ajax 对象。
属性:
    XMLHTTP     xmlHttp                                                         此ajax类被包装xmlhttp对象
    encoding = "UTF-8"                                                          编码
方法:
    void        open(String url, String method = "POST", Boolean async = true, String user = null, String password = null)
                                                                                创建一个新的http请求，并指定此请求的方法、URL以及验证信息
    void        setHeader(String header, String value)                          设置请求头 (POST打开会自动设置必须header) 
    void        setHeaders(Object headers)                                      设置请求头
    void        send(Object varBody = {})                                       发送 带数据的请求
    void        abort()                                                         取消当前请求
事件:
    事件名      参数
    request   Integer readyState                                                读取状态 状态 0-4 0 (未初始化) 1 (初始化) 2 (发送数据) 3 (数据传送中) 4 (完成);
    success   Ajax.Response response                                            请求成功 请自行包装xmlhttp
    failure   Ajax.Response response                                            请求失败 请自行包装xmlhttp
GET请求
Ajax.Request Ajax.get({
                String url:"",                                                  请求url
                Object data:null,                                               请求数据
                boolean async:true,                                             同步异步
                String user:null,                                               用户名
                String password:null,                                           密码
                Function request:ZHUOZHUO.FALSE(int readyState),                请求中
                Function success:ZHUOZHUO.FALSE(Ajax.Response response),        成功
                Function failure:ZHUOZHUO.FALSE(Ajax.Response response)});      失败
POST请求
Ajax.Request Ajax.post({参数同Ajax.get});